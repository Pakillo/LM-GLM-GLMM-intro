---
title: "Linear models"
author: "Francisco Rodríguez-Sánchez"
engine: knitr
format: html
toc: true
filters:
  - webr
webr: 
  packages: ['visreg', 'easystats', 'patchwork', 'emmeans', 'modelsummary', 'marginaleffects']
  autoload-packages: true
  channel-type: "post-message"
---

# A simple linear model


### Example dataset: forest trees

- Download [this dataset](https://raw.githubusercontent.com/Pakillo/LM-GLM-GLMM-intro/trees/data/trees.csv)

```{r}
download.file("https://raw.githubusercontent.com/Pakillo/LM-GLM-GLMM-intro/trees/data/trees.csv",
              destfile = "trees.csv", mode = "wb")
```

- Import:

```{r}
trees <- read.csv("trees.csv")
head(trees)
```


### Questions

- What is the relationship between DBH and height?

- Do taller trees have bigger trunks?

- Can we predict height from DBH? How well?



## Plot your data first!

### Exploratory Data Analysis (EDA)

Outliers

```{r}
plot(trees$height)
```


### Histogram of response variable

```{r}
hist(trees$height)
```


### Histogram of predictor variable

```{r}
hist(trees$dbh)
```

### Scatterplot

```{r}
plot(height ~ dbh, data = trees, las = 1)
```



## Model fitting

### Now fit model

Hint: `lm`

```{r}
m1 <- lm(height ~ dbh, data = trees)
```

which corresponds to

$$
  \begin{aligned}  
  Height_{i} = a + b \cdot DBH_{i} + \varepsilon _{i} \\  
  \varepsilon _{i}\sim N\left( 0,\sigma^2 \right) \\  
  \end{aligned}  
$$


### Package `equatiomatic` returns model structure

```{r}
#| eval: false
library("equatiomatic")
m1 <- lm(height ~ dbh, data = trees)
equatiomatic::extract_eq(m1)
```

```{r}
#| eval: false
equatiomatic::extract_eq(m1, use_coefs = TRUE)
```



## Model interpretation


### What does this mean?

```{r}
summary(m1)
```


### Estimated distribution of the **intercept** parameter

```{r}
library("easystats")
```

```{r}
parameters(m1)[1,]
```

```{r}
plot(simulate_parameters(m1), show_intercept = TRUE)
```


### Estimated distribution of the **slope** parameter

```{r}
parameters::parameters(m1)[2,]
```

```{r}
plot(simulate_parameters(m1))
```

### Distribution of residuals

```{r}
hist(residuals(m1))
```


### Degrees of freedom

DF = n - p

n = sample size

p = number of estimated parameters




### R-squared

Proportion of 'explained' variance

$R^{2} = 1 - \frac{Residual Variation}{Total Variation}$



### Adjusted R-squared

Accounts for model complexity 

(number of parameters)

$R^2_{adj} = 1 - (1 - R^2) \frac{n - 1}{n - p - 1}$


### Quiz 

https://pollev.com/franciscorod726



### Retrieving model coefficients

```{r}
coef(m1)
```

### Confidence intervals for parameters

```{r}
confint(m1)
```


### Retrieving model parameters (easystats)

```{r}
parameters(m1)
```

<https://easystats.github.io/parameters/>



## Communicating results

### Avoid dichotomania of statistical significance

- "Never conclude there is **‘no difference’** or ‘no association’ just because **p > 0.05 or CI includes zero**"

- Estimate and communicate **effect sizes and their uncertainty**

- https://doi.org/10.1038/d41586-019-00857-9


### Communicating results

- We found a **significant relationship** between DBH and Height **(p<0.05)**.

- We found a {*significant*} **positive** relationship between DBH and Height {*(p<0.05)*} **(b = 0.61, SE = 0.01)**.

- (add p-value if you wish)


### Models that describe themselves (easystats)

```{r}
report(m1)
```

<https://easystats.github.io/report/>



### Generating table with model results: `modelsummary`

```{r}
library("modelsummary")
```

```{r}
modelsummary(m1, output = "html")  ## Word, PDF, PowerPoint, png...
```

<https://modelsummary.com/>


### Generating table with model results: `modelsummary`

```{r}
modelsummary(m1, fmt = 2, 
             estimate = "{estimate} ({std.error})", 
             statistic = NULL,
             gof_map = c("nobs", "r.squared", "rmse"),
             output = "html")
```




## Visualising fitted model

### Plot model: `visreg`

```{r}
library("visreg")
```

```{r}
visreg(m1)
```


`visreg` can use ggplot2 too

```{r}
#| eval: false
visreg(m1, gg = TRUE) + theme_bw()
```

<https://pbreheny.github.io/visreg>


### Plot (easystats)

```{r}
plot(estimate_expectation(m1))
```


### Plot (modelsummary)

```{r}
modelplot(m1)
```


### Plot model parameters with easystats (`see` package)

```{r}
plot(parameters(m1), show_intercept = TRUE, show_labels = TRUE)
```


### Plot parameters' estimated distribution

```{r}
plot(simulate_parameters(m1))
```



## Model checking


### Linear model assumptions

- **Linearity** (transformations, GAM...)

- **Residuals**:
    - Independent
    - Equal variance
    - Normal

- Negligible **measurement error** in predictors




### Are residuals normal? 

```{r}
hist(residuals(m1))
```

SD = 4.09


### Model checking: `plot(model)`

```{r}
def.par <- par(no.readonly = TRUE)
layout(matrix(1:4, nrow=2))
plot(m1)
par(def.par)
```


### Model checking with `performance` (easystats)

```{r}
check_model(m1)
```

<https://easystats.github.io/performance/articles/check_model.html>



### A dashboard to explore the full model

```{r}
#| eval: false
model_dashboard(m1)
```




## Making predictions with easystats

### Estimate expected values

```{r}
pred <- estimate_expectation(m1)
head(pred)
```


### Expected values given DBH

```{r}
plot(estimate_expectation(m1))
```



### Calibration plot: observed vs predicted

```{r}
pred$height.obs <- trees$height
plot(height.obs ~ Predicted, data = pred, xlim = c(15, 60), ylim = c(15, 60))
abline(a = 0, b = 1)
```


### Estimate prediction interval

Accounting for residual variation!

```{r}
pred <- estimate_prediction(m1)
head(pred)
```

### Confidence vs Prediction interval

```{r}
plot(estimate_expectation(m1))
```

```{r}
plot(estimate_prediction(m1))
```


### Make predictions for new data

```{r}
estimate_expectation(m1, data = data.frame(dbh = 39))
```

```{r}
estimate_prediction(m1, data = data.frame(dbh = 39))
```




## Workflow

- **Visualise data**

- **Understand fitted model** (`summary`)

- **Visualise model** (`visreg`...)

- **Check model** (`plot`, `check_model`, calibration plot...)

- **Predict** (`predict`, `estimate_expectation`, `estimate_prediction`)






# Categorical predictors (factors)


## Q: Does tree height vary with sex?

```{r}
boxplot(height ~ sex, data = trees)
```



### Model height ~ sex

```{r}
m2 <- lm(height ~ sex, data = trees)
summary(m2)
```



### Linear model with categorical predictors

```{r}
m2 <- lm(height ~ sex, data = trees)
```

corresponds to 

$$
  \begin{aligned} 
  Height_{i} = a + b_{male} + \varepsilon _{i} \\
  \varepsilon _{i}\sim N\left( 0,\sigma^2 \right) \\
  \end{aligned} 
$$



### Model height ~ sex

```{r}
m2 <- lm(height ~ sex, data = trees)
summary(m2)
```


### Quiz

https://pollev.com/franciscorod726


### Let's read the model report...

```{r}
report(m2)
```



### Estimated distribution of the **intercept** parameter

**Intercept = Height of females**

```{r}
parameters(m2)[1,]
```

```{r}
plot(simulate_parameters(m2), show_intercept = TRUE)
```


### Estimated distribution of the *beta* parameter

*beta* = **height difference** of males vs females

```{r}
parameters(m2)[2,]
```

```{r}
plot(simulate_parameters(m2))
```





### Analysing differences among factor levels

```{r}
estimate_means(m2)
```

```{r}
estimate_contrasts(m2)
```


### Visualising the fitted model

### Plot (visreg)

```{r}
visreg(m2)
```


### Plot (easystats)

```{r}
plot(estimate_means(m2))
```



### Model checking

### Model checking: residuals

```{r}
hist(resid(m2))
```

```{r}
def.par <- par(no.readonly = TRUE)
layout(matrix(1:4, nrow=2))
plot(m2)
par(def.par)
```


### Model checking (easystats)

```{r}
check_model(m2)
```




## Q: Does height differ among field sites?

### Quiz 

https://pollev.com/franciscorod726

### Plot data first

```{r}
plot(height ~ site, data = trees)
```


### Linear model with categorical predictors

```{r}
m3 <- lm(height ~ site, data = trees)
```


$$
  \begin{aligned} 
  y_{i} = a + b_{site2} + c_{site3} + d_{site4} + e_{site5} +...+ \varepsilon _{i} \\   
  \varepsilon _{i}\sim N\left( 0,\sigma^2 \right) \\
  \end{aligned} 
$$





### Model Height ~ site

**All right here?**

```{r}
m3 <- lm(height ~ site, data = trees)
summary(m3)
```


### site is a factor!

```{r}
trees$site <- as.factor(trees$site)
```


### Model Height ~ site

```{r}
m3 <- lm(height ~ site, data = trees)
summary(m3)
```


### Estimated parameter distributions

```{r}
plot(simulate_parameters(m3))
```




### Estimated tree heights for each site

```{r}
estimate_means(m3)
```


### Plot estimated tree heights for each site

```{r}
plot(estimate_means(m3))
```

### Analysing differences among factor levels

For finer control see `emmeans` package

```{r}
estimate_contrasts(m3)
```


### Analysing differences among factor levels

How different are site 2 and site 9?

```{r}
library("marginaleffects")
```

```{r}
hypotheses(m3, "site2 = site9")
```



### Presenting model results

```{r}
parameters(m3)
```


```{r}
modelsummary(m3, estimate  = "{estimate} ({std.error})", statistic = NULL, 
             fmt = 1, gof_map = NA, coef_rename = paste0("site", 1:10), output = "html")
```



### Plot (visreg)

```{r}
visreg(m3)
```

### Plot (easystats)

```{r}
plot(estimate_means(m3))
```



### Plot model (modelsummary)

```{r}
modelplot(m3)
```


### Plot model (easystats)

```{r}
plot(parameters(m3), show_intercept = TRUE)
```


### Fit model without intercept

```{r}
m3bis <- lm(height ~ site - 1, data = trees)
summary(m3bis)
```

```{r}
plot(parameters(m3bis))
```

### Model checking: residuals

```{r}
def.par <- par(no.readonly = TRUE)
layout(matrix(1:4, nrow = 2))
plot(m3)
par(def.par)
```


### Model checking: residuals

```{r}
check_model(m3)
```





# Combining continuous and categorical predictors


### Predicting tree height based on dbh and site

```{r}
lm(height ~ site + dbh, data = trees)
```

corresponds to 

$$
  \begin{aligned} 
  y_{i} = a + b_{site2} + c_{site3} + d_{site4} + e_{site5} +...+ k \cdot DBH_{i} + \varepsilon _{i} \\ 
  \varepsilon _{i}\sim N\left( 0,\sigma^2 \right) \\
  \end{aligned} 
$$


### Predicting tree height based on dbh and site

```{r}
m4 <- lm(height ~ site + dbh, data = trees)
summary(m4)
```


### Presenting model results

```{r}
parameters(m4)
```



### Estimated tree heights for each site

```{r}
estimate_means(m4)
```


### Fit model without intercept

```{r}
m4 <- lm(height ~ -1 + site + dbh, data = trees)
summary(m4)
```


### Plot (visreg)

```{r}
visreg(m4)
```

```{r}
visreg(m4, xvar = "dbh", by = "site", overlay = TRUE, band = FALSE)
```



### Plot model (easystats)

```{r}
plot(parameters(m4))
```

Keeping sites only, dropping "dbh"

```{r}
plot(parameters(m4, drop = "dbh"))
```


### Plot model (modelsummary)

```{r}
modelplot(m4)
```

Keeping sites only, dropping "dbh"

```{r}
modelplot(m4, coef_omit = "dbh")
```


### What happened to site 8?

```{r}
visreg(m3)
```

```{r}
visreg(m4, xvar = "site")
```

site 8 has the largest diameters:

```{r}
boxplot(dbh ~ site, data = trees)
```

**DBH**

```{r}
aggregate(trees$dbh ~ trees$site, FUN = mean)
```

**HEIGHT**

```{r}
aggregate(trees$height ~ trees$site, FUN = mean)
```




### We have fitted model w/ many intercepts and single slope

```{r}
visreg(m4, xvar = "dbh", by = "site", overlay = TRUE, band = FALSE)
```




### Slope is the same for all sites

```{r}
parameters(m4, keep = "dbh")
```



### Model checking: residuals

```{r}
def.par <- par(no.readonly = TRUE)
layout(matrix(1:4, nrow=2))
plot(m4)
par(def.par)
```


### Model checking with easystats

```{r}
check_model(m4)
```



### How good is this model? Calibration plot

```{r}
trees$height.pred <- fitted(m4)
plot(trees$height.pred, trees$height, 
     xlab = "Tree height (predicted)", 
     ylab = "Tree height (observed)", 
     las = 1, xlim = c(10,60), ylim = c(10,60))
abline(a = 0, b = 1)
```


### How good is this model? Calibration plot (easystats)

```{r}
pred <- estimate_expectation(m4)
pred$obs <- trees$height
plot(obs ~ Predicted, data = pred, xlim = c(15, 60), ylim = c(15, 60))
abline(a = 0, b = 1)
```


### *Posterior* predictive checking

Simulating response data from fitted model (`yrep`)

and comparing with observed response (`y`)

```{r}
check_predictions(m4)
```




## Predicting heights of new trees (easystats)

### Using model for prediction

Expected height of 10-cm diameter tree in each site?

```{r}
trees.10cm <- data.frame(site = as.factor(1:10),
                        dbh = 10)
trees.10cm
```


### Using model for prediction

Expected height of 10-cm DBH trees at each site

```{r}
pred <- estimate_expectation(m4, data = trees.10cm)
pred
```

### Using model for prediction

Prediction intervals (accounting for residual variance)

```{r}
pred <- estimate_prediction(m4, data = trees.10cm)
pred
```



# Q: Does allometric relationship between Height and Diameter vary among sites?

```{r}
df <- data.frame(dbh = seq(10, 50, by = 1), 
                 height = seq(20, 60, by = 1))

plot(height ~ dbh, data = df, type = "n")
abline(a = 25, 0.6)
abline(a = 40, b = 0.1, col = "steelblue")
abline(a = 50, b = -0.3, col = "orangered")
```



### Model with interactions

```{r}
m5 <- lm(height ~ site*dbh, data = trees)
summary(m5)
```



### Does slope vary among sites?

```{r}
visreg(m5, xvar = "dbh", by = "site")
```

```{r}
visreg(m5, xvar = "dbh", by = "site", overlay = TRUE, band = FALSE)
```


END

